#!/bin/bash

set -e
mount -o remount,rw / || true
export PATH=/bin:/sbin:/usr/bin:/usr/sbin
setup_parts=()
setup_grub=""
auto_disk=""
DISKX=""
> /tmp/installer-parts

# cttyhack
if [[ ! -f /tmp/.ctty ]] ; then
    touch /tmp/.ctty
    exec /bin/busybox setsid \
    /bin/busybox cttyhack /sbin/init
fi

kur1()
{

DISK=$1
echo kurulum yapılacak disk $DISK

   #########################################################
    if echo ${DISK} | grep nvme ; then
        DISKX=${DISK}p
    else
        DISKX=${DISK}
    fi


debug=false


fallback(){
        echo -e "\033[31;1mInstallation failed.\033[;0m"
        echo -e "Creating a shell for debuging. Good luck :D"
        PS1="\[\033[32;1m\]>>>\[\033[;0m\]" /bin/bash --norc --noprofile
        if [[ $$ -eq 0 ]] ; then
            echo o > /proc/sysrq-trigger
        else
            exit 1
        fi
}
ldconfig
mkdir -p hedef
mkdir -p kaynak
mkdir -p cdrom

echo "*********************disk bölümleri silindi ******************************"
    
  dd if=/dev/zero of=/dev/${DISK} bs=512 count=1
    sync && sleep 1

        yes | parted /dev/${DISK} mktable msdos || fallback
        yes | parted /dev/${DISK} mkpart primary fat32 1 "100%" || fallback
        sync && sleep 1
         yes |e2fsck -f /dev/${DISKX}1
         sync && sleep 1
	yes |tune2fs -O ^metadata_csum /dev/${DISKX}1
	 sync && sleep 1
        yes | mkfs.ext4  /dev/${DISKX}1 || fallback
        yes | parted /dev/${DISK} set 1 esp on || fallback
        sync && sleep 1
        mount /dev/${DISKX}1  /hedef || fallback
        mkdir -p /hedef/boot 
echo "********************* kurulum başladı******************************"

mount -t iso9660 -o loop /dev/sr0 cdrom
mount -t squashfs -o loop /cdrom/live/filesystem.squashfs /kaynak
cp -prfv /kaynak/* /hedef/
cp /cdrom/boot/initrd.img /hedef/boot/initrd.img-$(uname -r)
cp /cdrom/boot/vmlinuz /hedef/boot/vmlinuz-$(uname -r)
cp /hedef/etc/kernel-config /hedef/boot/config-$(uname -r)
sync

mkdir -p /hedef/dev
mkdir -p /hedef/sys
mkdir -p /hedef/proc
mkdir -p /hedef/run
mkdir -p /hedef/tmp
sync

mount --bind /dev /hedef/dev
mount --bind /sys /hedef/sys
mount --bind /proc /hedef/proc
mount --bind /run /hedef/run
mount --bind /tmp /hedef/tmp
chroot /hedef /bin/busybox --install -s /bin

chroot /hedef /etc/init.d/agettyinstall
rm /hedef/etc/init.d/agettyinstall


chroot /hedef /usr/sbin/update-initramfs -u -k $(uname -r)

chroot /hedef grub-install --boot-directory=/boot /dev/${DISK} --target=i386-pc

mkdir -p /hedef/boot/grub
bid=$(blkid /dev/${DISKX}1|cut -d' ' -f2|cut -c 7-42)
rm -rf /hedef/boot/grub/grub.cfg
touch /hedef/boot/grub/grub.cfg
echo "linux /boot/vmlinuz-$(uname -r) init=/sbin/openrc-init root=UUID=${bid} rw quiet">>/hedef/boot/grub/grub.cfg
echo "initrd /boot/initrd.img-$(uname -r)">>/hedef/boot/grub/grub.cfg
echo "boot">>/hedef/boot/grub/grub.cfg

echo root:x:0:0:root:/root:/bin/sh > /hedef/etc/passwd 
chroot /hedef chmod 755 /etc/passwd

chroot /hedef adduser -D -s /bin/sh by -h /home/by
chroot /hedef echo -e "1\n1\n"|chroot /hedef passwd by
chroot /hedef echo -e "1\n1\n"|chroot /hedef passwd root

umount -f -R /hedef/* || true
sync  || fallback

if [[ "$debug" != "false" ]] ; then
    PS1="\[\033[32;1m\]>>>\[\033[;0m\]" /bin/bash --norc --noprofile
else
    echo "Installation done. System restarting in 3 seconds. Press any key to restart immediately."
    read -t 3 -n 1 -s
fi
if [[ $UID -eq 0 ]] ; then
    echo b > /proc/sysrq-trigger
else
    exit 0
fi
}


###### find partition by mount point ######
find_part(){
    cat /tmp/installer-parts | grep -e "^$1 " | cut -f1 -d" "
}

find_type(){
    blkid | grep "$1" | sed "s/.*TYPE=\"//g;s/\".*//g"
}

###### Language menu ######
lang_menu(){
    ls /usr/share/i18n/locales | grep -v "^ku" | grep -v "^hy" | grep -v "@" | while read line ; do
        lang=$(echo $line | cut -f1 -d"_")
        if [[ ! -d /usr/share/locale/$lang ]] ; then
            continue
        fi
        desc=$(cat /usr/share/i18n/locales/$line | grep "^title " | cut -f2 -d"\"" | sed "s/ /_/g")
        if [[ "$desc" == "" ]] ; then
            desc="$line"
        fi
        echo "$line $desc"
    done
}

select_language(){
    result=$(dialog --no-cancel \
                --output-fd 1 --menu \
                "$TITLE" 0 0 0 \
                $(lang_menu)
            )
    echo $result
}


###### install function ######
install_main() {
    echo ${setup_grub}
    echo ${setup_parts[@]}
    # mount target
    mkdir -p /target
    for disk in $(cat /tmp/installer-parts | cut -f1 -d" " | sort -V) ; do
        target=$(cat /tmp/installer-parts | grep -e "^$disk " | cut -f2 -d" ")
        mkdir -p /target/$target
        while umount /target/$target ; do true ; done
        mount -t $(find_type $disk) $(find_part $disk) /target/$target
    done
    install_common
}

install_common(){
    # mount source
    mkdir -p /source
    while umount /source ; do true ; done
    mount -o loop,ro /dev/loop0 /source
    # copy filesystem
    cp -prfv /source/* /target
    sync
    # mount binds
    for dir in dev sys proc ; do
        mount --bind /$dir /target/$dir
    done
    if [[ -d /target/sys/firmware/efi ]] ; then
        mount -t efivarfs efivarfs /target/sys/firmware/efi/efivars/
    fi
    # grub install
    chroot /target grub-install ${setup_grub}
    chroot /target grub-mkconfig -o /boot/grub/grub.cfg
    # umount binds
    if [[ -d /sys/firmware/efi ]] ; then
        umount -lf /target/sys/firmware/efi/efivars/
    fi
    for dir in dev sys proc ; do
        umount -lf /target/$dir
    done
    # reboot
    reboot -f
}

auto_install_main(){


    # erase mbr
    dd if=/dev/zero of=${auto_disk} bs=512 count=1
    pfx=""
    if echo ${auto_disk} | grep nvme >/dev/null; then
        pfx="p"
    fi
    # create new partitions and mount
    mkdir -p /target/
    if [[ -d /sys/firmware/efi ]] ; then
        yes | parted ${auto_disk} mktable gpt
        yes | parted ${auto_disk} mkpart primary fat32 1 "100MB"
        yes | parted ${auto_disk} mkpart primary fat32 100MB "100%"
        yes | mkfs.vfat ${auto_disk}${pfx}1
        yes | mkfs.ext4 -O ^has_journal -O ^metadata_csum ${auto_disk}${pfx}2
        mount -t ext4 ${auto_disk}${pfx}2 /target
        mkdir -p /target/boot/efi
        mount -t vfat ${auto_disk}${pfx}1 /target/boot/efi
    else
        yes | parted ${auto_disk} mktable msdos
        yes | parted ${auto_disk} mkpart primary fat32 1 "100%"
        yes | mkfs.ext4 -O ^has_journal -O ^metadata_csum ${auto_disk}${pfx}1
        mount -t ext4 ${auto_disk}${pfx}1 /target
    fi
    sync
    install_common
}

###### Main Menu ######
main_menu(){
    while true ; do
        result=$(dialog --no-cancel \
            --output-fd 1 --menu \
            "Main Menu" 0 0 0 \
            "1" "Automated Install" \
            "2" "Start in Live Mode" \
            "3" "Run Terminal" \
            "0" "Reboot"
        )
      #              "2" "Manual Install" \
        echo -ne "\033c"
        if [[ $result -eq 0 ]] ; then
            reboot -f
        elif [[ $result -eq 1 ]] ; then
            auto_install_menu
        elif [[ $result -eq 3 ]] ; then
            start_openrc
        elif [[ $result -eq 4 ]] ; then
           echo -e "\033[33;1mTerminal mode. You can type exit and go back.\033[;0m"
            PS1="\033[32;1m>>>\033[;0m " /bin/busybox ash
        fi
        echo $result
    done
}

install_menu(){
    while true ;  do
        result=$(dialog --no-cancel \
            --output-fd 1 --menu \
            "Install menu" 0 0 0 \
            "1" "Create / Modify Partition" \
            "2" "Select partition" \
            "${setup_parts[@]}" \
            "i" "Install now" \
            "0" "Go back"
        )
        if [[ "$result" == "i" ]] ; then
            setup_grub=/dev/$(TITLE="Select a disk for grub bootloader" select_disk)
           install_main
           break
        elif [[ $result -eq 1 ]] ; then
            cfdisk /dev/$(TITLE="Select a disk for edit" select_disk)
        elif [[ $result -eq 2 ]] ; then
            partition=/dev/$(TITLE="Select a partition for mountpoint" select_partition)
            mountpoint=$(mountpoint_menu)
            if echo "${setup_parts[@]}" | grep $partition || echo "${setup_parts[@]}" | grep $mountpoint ; then
                dialog --msgbox "Please select another partition or mountpoint" 0 0
            else
                setup_parts+=($partition $mountpoint)
                echo -e "$partition $mountpoint" >> /tmp/installer-parts
            fi
            format_type=$(dialog --no-cancel \
                --output-fd 1 --menu \
                "Select filesystem format for $partition" 0 0 0 \
                "none" "do not format" \
                "ext2" "filesystem for legacy linux rootfs" \
                "ext4" "filesystem for linux rootfs partition or storage" \
                "fat32" "filesystem for removable devices of efi partition")
            if [[ ${format_type} == "ext2" ]] ; then
                echo -ne "\033c"
                yes | mkfs.ext2 $partition
            elif [[ ${format_type} == "ext4" ]] ; then
                echo -ne "\033c"
                yes | mkfs.ext4 -O ^has_journal -O ^metadata_csum $partition
            elif [[ ${format_type} == "fat32" ]] ; then
                echo -ne "\033c"
                yes | mkfs.vfat $partition
            fi
        elif [[ $result -eq 0 ]] ; then
            break
        else
            partition=$result
            mountpoint=$(grep /tmp/installer-parts -e "^$result" | cut -f2 -d" ")
            setup_parts=(${setup_parts[@]/"$partition"})
            setup_parts=(${setup_parts[@]/"$mountpoint"})
            sed -i "s|^$partition .*||g;/^$/d" /tmp/installer-parts
        fi
    done
}

auto_install_menu(){
    while true ;  do
       auto_disk=/dev/$(TITLE="Select a disk for installation" select_disk)
       setup_grub=${auto_disk}
       #auto_install_main
       kur1 ${auto_disk}
    done
}

mountpoint_menu(){
    if [[ -d /sys/firmware/efi ]] ; then
        efi_mounts=("/boot/efi" "Boot directory for uefi")
    fi
    result=$(dialog --no-cancel \
                --output-fd 1 --menu \
                "Select a mountpoint" 0 0 0 \
                "/" "Root filesystem" \
                "${efi_mounts[@]}" \
                "custom" "Custom directory")
    if [[ "$result" == "custom" ]] ; then
        result=""
        while ! mkdir -p "$result" ; do
            result=$(dialog --inputbox "Enter new mountpoint" 0 0)
        done
    fi
    echo $result
}


###### Partition selection menu ######
select_partition(){
    export PATH="/bin:/sbin:/usr/bin:/usr/sbin"
    menu=()
    for disk in /sys/block/* ; do
        disk=${disk/*\//}
        for part in /sys/block/$disk/$disk* ; do
            if [[ -d $part ]] ; then
                part=${part/*\//}
                type=$(blkid | grep "/dev/$part:" | sed "s/.* TYPE=\"//g;s/\".*//g")
                label=$(blkid | grep "/dev/$part:" | grep LABEL | sed "s/.* LABEL=\"//g;s/\".*//g")
                if [[ "$label" == "" ]] ; then
                    label="-"
                fi
                size=$(lsblk -r | grep "^$part " | cut -f4 -d" ")
                menu+=("$part" "$type    $label    $size")
            fi
        done
    done >/dev/null
    info_label="Partition | Filesystem | Label | Size"
    while [[ ! -b "/dev/$result" ]] ; do
        result=$(dialog --no-cancel \
            --output-fd 1 --menu \
            "$TITLE\n\n${info_label}" 0 0 0 \
            "${menu[@]}")
    done
    echo $result
}

###### Disk selection menu ######
select_disk(){
    export PATH="/bin:/sbin:/usr/bin:/usr/sbin"
    menu=()
    for disk in $(ls /sys/block/ | grep -e sd -e nvme) ; do
        disk=${disk/*\//}
        size=$(lsblk -r | grep "^$disk " | cut -f4 -d" ")
        menu+=("$disk" "$size")
    done >/dev/null
    while [[ ! -b "/dev/$result" ]] ; do
        result=$(dialog --no-cancel \
            --output-fd 1 --menu \
            "$TITLE" 0 0 0 \
            "${menu[@]}")
    done
    echo $result
}

###### username password menu ######
get_password(){
    while [[ "$pass" == "" ]] ; do
       pass=$(dialog  --no-cancel --output-fd 1 \
            --title "$TITLE" \
            --backtitle "initial settings" \
            --inputbox "Enter password" 0 0
        )
    done
    echo $pass
}
get_username(){
    while [[ "$user" == "" ]] ; do
       user=$(dialog  --no-cancel --output-fd 1 \
            --title "$TITLE" \
            --backtitle "initial settings" \
            --inputbox "Enter username" 0 0
        )
    done
    echo $user
}

###### init replace functions ######

start_openrc(){
    killall udevd &>/dev/null || true
    exec /sbin/openrc-init

}

fix_init(){
    # replace init with openrc
    rm -f /sbin/init
    ln -s openrc-init /sbin/init
}

###### first setup menu ######
first_setup(){
    while true ; do
        result=$(dialog --no-cancel \
            --output-fd 1 --menu \
            "First Setup" 0 0 0 \
            1 "Use default settings" \
            2 "Use custom settings" \
            3 "Run terminal" \
            0 "Reboot")
        if [[ "$result" == "0" ]] ; then
            reboot -f
        elif [[ "$result" == "1" ]] ; then
            useradd -m pingu -s /bin/bash
            for grp in audio video input wheel users ; do
                usermod -aG $grp pingu || true
            done
            r=$(TITLE="Please provide a password" get_password)
            echo -e "$r\n$r\n" | passwd pingu
            echo -e "$r\n$r\n" | passwd root
            fix_init
            start_openrc
        elif [[ "$result" == "2" ]] ; then
            u=$(TITLE="Please provide an username" get_username)
            r=$(TITLE="Please provide a password" get_password)
            l=$(TITLE="Please select language" select_language)
            useradd -m "$u" -s /bin/bash
            for grp in audio video input wheel users ; do
                usermod -aG "$u" pingu || true
            done
            echo -e "$r\n$r\n" | passwd "$u"
            echo -e "$r\n$r\n" | passwd root
            mkdir -p /lib64/locale
            echo "$l.UTF-8 UTF-8" > /etc/locale.gen
            echo "" >> /etc/locale.gen
            echo "export LANG=$l.UTF-8" > /etc/profile.d/locale.sh
            echo "export LC_ALL=$l.UTF-8" >> /etc/profile.d/locale.sh
            locale-gen
            fix_init
            start_openrc
        elif [[ "$result" == "3" ]] ; then
            create_shell
        fi
    done
}


###### terminal ######
create_shell(){
    set +e
    echo -e "\033[33;1mTerminal mode. You can type exit and go back.\033[;0m"
    PS1="\033[32;1m>>>\033[;0m " \
        /bin/busybox ash
    set -e
}

###### begin script ######

if [[ $$ -eq 1 ]] ; then
    udevd &
    udevadm trigger --action=add
    udevadm settle
fi

while true ; do
    if grep "boot=live" "/proc/cmdline"; then
        main_menu || create_shell
    else
   	 echo "*********************eudev çalıştırıldı ******************************"
	/bin/udv
	echo "*********************ek modüller yüklendi ******************************"
	modprobe loop
	modprobe ext4
    	main_menu || create_shell
        #first_setup || create_shell
    fi
done



